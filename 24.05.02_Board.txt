0. 클라이언트로부터 Authorization 헤더와 Request Body 를 포함하여 요청
0.1 권한이 없는 사용자이면 'AF' 응답 처리
0.2 유효하지 않는 데이터이면 'VF' 응답 처리

(title, contents) , userId


1. 데이터 베이스의 user 테이블에서 해당 유저가 존재하는지 확인
1.1 존재하지 않는 유저라면 'AF' 응답 처리 (401)
1.2 데이터베이스 오류가 발생하면 'DBE' 응답 처리


2. Board 테이블에 데이터 삽입
2.1 데이터베이스 오류가 발생하면 'DBE' 응답 처리


3. 'SU' 응답 처리


-------------------------------------------------------------
http://localhost:4000/api/v1/auth/sign-in    : POST
{
    "userId" : 
    "userPassword" :
}

-> 토큰 생성
: 

http://localhost:4000/api/v1/board/     : POST
위에서 생성한 토큰을 Authorization > Bearer Token 으로 넣기

{
    "title" :
    "contents" : 
}

1. 인증 없이 -> "AF"
2. 유효하지 않은 데이터 -> "VF"
3. "SU"


-------------------------------------------------------------
/front
http://localhost:3000/


----------------------------------------------------------
데이터 베이스에서 전체 리스트 조회 ->  List<BoardEntity> -> List<BoardListItem>


<<<<<<<<<<<<<<<<<<<<< 24.05.03 >>>>>>>>>>>>>>>>>>>>>                             
결과 전체 게시물 리스트

한 페이지당 : 10
한 섹션당 : 10

총 게시물 수 : 315
총 페이지 수 : 32 ((총게시물수 -1) // 한페이지당 게시물수) + 1
총 섹션 수 : 4 ((총페이지수 -1) // 한섹션당페이시수) + 1      

# 페이지 - 시작 인덱스 ~ 종료 인덱스
1 - 0 ~ 9 (페이지 -1) *10 ~ {페이지 *10 -1 / 맨마지막 인덱스}
2 - 10 ~ 19
3 - 20 ~ 29
...
31 - 300 ~ 309
32 - 310 ~ 315

# 섹션 - 시작 페이지 ~ 종료 페이지
1 - 1 ~ 10 (섹션 * 섹션당페이지수 - (섹션당페이지수 -1)) ~ [(섹션 * 섹션당페이지수) / 마지막페이지]
2 - 11 ~ 20
3 - 21 ~ 30
4 - 31 ~ 32